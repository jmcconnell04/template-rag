# docker-compose.yml (Default for SQLite)
# This file sets up the workspace with SQLite as the metadata/chat database.
# The server application will create the SQLite DB file inside its mounted volume.

services:
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    ports:
      - '${RAG_API_HOST_PORT:-8000}:8000'
    volumes:
      - ./server/app:/app/app # For live development code reload
      - ./prompts:/app/prompts:ro
      - ./rag_files/metadata_db:/app/database # SQLite DB file will be created here by the server
      - ./rag_files/vector_stores/chroma_data:/app/chroma_data # For ChromaDB
      - ./rag_files/seed:/app/seed_data:ro # For seed documents
    env_file:
      - .env
    restart: unless-stopped
    container_name: '${WORKSPACE_NAME}-server'
    depends_on:
      - ollama

  ollama:
    image: ollama/ollama:latest
    ports:
      - '11434:11434'
    volumes:
      - ollama_vol:/root/.ollama
    container_name: '${WORKSPACE_NAME}-ollama'
    restart: unless-stopped
    # GPU settings are in docker-compose.gpu.yml (if used as an override)

  open_webui:
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - '${OPENWEBUI_HOST_PORT:-3000}:8080'
    environment:
      - 'OPENAI_API_BASE_URL=http://server:8000/v1'
      - 'OPENAI_API_KEY=dummy_key_for_openwebui'
      - 'ENABLE_TELEMETRY=false'
      - 'WEBUI_ADMIN_USER_EMAIL=${WEBUI_ADMIN_USER_EMAIL:-admin@example.com}'
      - 'WEBUI_ADMIN_USER_PASSWORD=${WEBUI_ADMIN_USER_PASSWORD:-changeme}'
    volumes:
      - openwebui_vol:/app/backend/data
    container_name: '${WORKSPACE_NAME}-open-webui'
    depends_on:
      - server
    restart: unless-stopped

volumes:
  ollama_vol:
    name: 'ollama-${WORKSPACE_NAME}'
  openwebui_vol:
    name: 'openwebui-${WORKSPACE_NAME}'
  # No specific volume needed here for SQLite as it's a file within a bind mount of the server
